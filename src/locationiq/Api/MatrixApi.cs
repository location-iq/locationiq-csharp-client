/* 
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using locationiq.Client;
using locationiq.Model;

namespace locationiq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMatrixApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Matrix Service
        /// </summary>
        /// <remarks>
        /// Computes duration of the fastest route between all pairs of supplied coordinates. Returns the durations or distances or both between the coordinate pairs. Note that the distances are not the shortest distance between two coordinates, but rather the distances of the fastest routes.
        /// </remarks>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional)</param>
        /// <param name="sources">Use location with given index as source. [ {index};{index}[;{index} ...] or all (default) ] &#x3D;&gt; index  0 &lt;&#x3D; integer &lt; #locations (optional)</param>
        /// <param name="destinations">Use location with given index as destination. [ {index};{index}[;{index} ...] or all (default) ] (optional)</param>
        /// <param name="fallbackSpeed">If no route found between a source/destination pair, calculate the as-the-crow-flies distance,  then use this speed to estimate duration. double &gt; 0 (optional)</param>
        /// <param name="fallbackCoordinate">When using a fallback_speed, use the user-supplied coordinate (input), or the snapped location (snapped) for calculating distances. [ input (default), or snapped ] (optional, default to &quot;&quot;input&quot;&quot;)</param>
        /// <returns>DirectionsMatrix</returns>
        DirectionsMatrix Matrix (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), string annotations = default(string), int sources = default(int), int destinations = default(int), decimal fallbackSpeed = default(decimal), string fallbackCoordinate = default(string));

        /// <summary>
        /// Matrix Service
        /// </summary>
        /// <remarks>
        /// Computes duration of the fastest route between all pairs of supplied coordinates. Returns the durations or distances or both between the coordinate pairs. Note that the distances are not the shortest distance between two coordinates, but rather the distances of the fastest routes.
        /// </remarks>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional)</param>
        /// <param name="sources">Use location with given index as source. [ {index};{index}[;{index} ...] or all (default) ] &#x3D;&gt; index  0 &lt;&#x3D; integer &lt; #locations (optional)</param>
        /// <param name="destinations">Use location with given index as destination. [ {index};{index}[;{index} ...] or all (default) ] (optional)</param>
        /// <param name="fallbackSpeed">If no route found between a source/destination pair, calculate the as-the-crow-flies distance,  then use this speed to estimate duration. double &gt; 0 (optional)</param>
        /// <param name="fallbackCoordinate">When using a fallback_speed, use the user-supplied coordinate (input), or the snapped location (snapped) for calculating distances. [ input (default), or snapped ] (optional, default to &quot;&quot;input&quot;&quot;)</param>
        /// <returns>ApiResponse of DirectionsMatrix</returns>
        ApiResponse<DirectionsMatrix> MatrixWithHttpInfo (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), string annotations = default(string), int sources = default(int), int destinations = default(int), decimal fallbackSpeed = default(decimal), string fallbackCoordinate = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Matrix Service
        /// </summary>
        /// <remarks>
        /// Computes duration of the fastest route between all pairs of supplied coordinates. Returns the durations or distances or both between the coordinate pairs. Note that the distances are not the shortest distance between two coordinates, but rather the distances of the fastest routes.
        /// </remarks>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional)</param>
        /// <param name="sources">Use location with given index as source. [ {index};{index}[;{index} ...] or all (default) ] &#x3D;&gt; index  0 &lt;&#x3D; integer &lt; #locations (optional)</param>
        /// <param name="destinations">Use location with given index as destination. [ {index};{index}[;{index} ...] or all (default) ] (optional)</param>
        /// <param name="fallbackSpeed">If no route found between a source/destination pair, calculate the as-the-crow-flies distance,  then use this speed to estimate duration. double &gt; 0 (optional)</param>
        /// <param name="fallbackCoordinate">When using a fallback_speed, use the user-supplied coordinate (input), or the snapped location (snapped) for calculating distances. [ input (default), or snapped ] (optional, default to &quot;&quot;input&quot;&quot;)</param>
        /// <returns>Task of DirectionsMatrix</returns>
        System.Threading.Tasks.Task<DirectionsMatrix> MatrixAsync (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), string annotations = default(string), int sources = default(int), int destinations = default(int), decimal fallbackSpeed = default(decimal), string fallbackCoordinate = default(string));

        /// <summary>
        /// Matrix Service
        /// </summary>
        /// <remarks>
        /// Computes duration of the fastest route between all pairs of supplied coordinates. Returns the durations or distances or both between the coordinate pairs. Note that the distances are not the shortest distance between two coordinates, but rather the distances of the fastest routes.
        /// </remarks>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional)</param>
        /// <param name="sources">Use location with given index as source. [ {index};{index}[;{index} ...] or all (default) ] &#x3D;&gt; index  0 &lt;&#x3D; integer &lt; #locations (optional)</param>
        /// <param name="destinations">Use location with given index as destination. [ {index};{index}[;{index} ...] or all (default) ] (optional)</param>
        /// <param name="fallbackSpeed">If no route found between a source/destination pair, calculate the as-the-crow-flies distance,  then use this speed to estimate duration. double &gt; 0 (optional)</param>
        /// <param name="fallbackCoordinate">When using a fallback_speed, use the user-supplied coordinate (input), or the snapped location (snapped) for calculating distances. [ input (default), or snapped ] (optional, default to &quot;&quot;input&quot;&quot;)</param>
        /// <returns>Task of ApiResponse (DirectionsMatrix)</returns>
        System.Threading.Tasks.Task<ApiResponse<DirectionsMatrix>> MatrixAsyncWithHttpInfo (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), string annotations = default(string), int sources = default(int), int destinations = default(int), decimal fallbackSpeed = default(decimal), string fallbackCoordinate = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MatrixApi : IMatrixApi
    {
        private locationiq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MatrixApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MatrixApi(String basePath)
        {
            this.Configuration = new locationiq.Client.Configuration { BasePath = basePath };

            ExceptionFactory = locationiq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatrixApi"/> class
        /// </summary>
        /// <returns></returns>
        public MatrixApi()
        {
            this.Configuration = locationiq.Client.Configuration.Default;

            ExceptionFactory = locationiq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MatrixApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MatrixApi(locationiq.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = locationiq.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = locationiq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public locationiq.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public locationiq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Matrix Service Computes duration of the fastest route between all pairs of supplied coordinates. Returns the durations or distances or both between the coordinate pairs. Note that the distances are not the shortest distance between two coordinates, but rather the distances of the fastest routes.
        /// </summary>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional)</param>
        /// <param name="sources">Use location with given index as source. [ {index};{index}[;{index} ...] or all (default) ] &#x3D;&gt; index  0 &lt;&#x3D; integer &lt; #locations (optional)</param>
        /// <param name="destinations">Use location with given index as destination. [ {index};{index}[;{index} ...] or all (default) ] (optional)</param>
        /// <param name="fallbackSpeed">If no route found between a source/destination pair, calculate the as-the-crow-flies distance,  then use this speed to estimate duration. double &gt; 0 (optional)</param>
        /// <param name="fallbackCoordinate">When using a fallback_speed, use the user-supplied coordinate (input), or the snapped location (snapped) for calculating distances. [ input (default), or snapped ] (optional, default to &quot;&quot;input&quot;&quot;)</param>
        /// <returns>DirectionsMatrix</returns>
        public DirectionsMatrix Matrix (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), string annotations = default(string), int sources = default(int), int destinations = default(int), decimal fallbackSpeed = default(decimal), string fallbackCoordinate = default(string))
        {
             ApiResponse<DirectionsMatrix> localVarResponse = MatrixWithHttpInfo(coordinates, bearings, radiuses, generateHints, approaches, exclude, annotations, sources, destinations, fallbackSpeed, fallbackCoordinate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Matrix Service Computes duration of the fastest route between all pairs of supplied coordinates. Returns the durations or distances or both between the coordinate pairs. Note that the distances are not the shortest distance between two coordinates, but rather the distances of the fastest routes.
        /// </summary>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional)</param>
        /// <param name="sources">Use location with given index as source. [ {index};{index}[;{index} ...] or all (default) ] &#x3D;&gt; index  0 &lt;&#x3D; integer &lt; #locations (optional)</param>
        /// <param name="destinations">Use location with given index as destination. [ {index};{index}[;{index} ...] or all (default) ] (optional)</param>
        /// <param name="fallbackSpeed">If no route found between a source/destination pair, calculate the as-the-crow-flies distance,  then use this speed to estimate duration. double &gt; 0 (optional)</param>
        /// <param name="fallbackCoordinate">When using a fallback_speed, use the user-supplied coordinate (input), or the snapped location (snapped) for calculating distances. [ input (default), or snapped ] (optional, default to &quot;&quot;input&quot;&quot;)</param>
        /// <returns>ApiResponse of DirectionsMatrix</returns>
        public ApiResponse<DirectionsMatrix> MatrixWithHttpInfo (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), string annotations = default(string), int sources = default(int), int destinations = default(int), decimal fallbackSpeed = default(decimal), string fallbackCoordinate = default(string))
        {
            // verify the required parameter 'coordinates' is set
            if (coordinates == null)
                throw new ApiException(400, "Missing required parameter 'coordinates' when calling MatrixApi->Matrix");

            var localVarPath = "/matrix/driving/{coordinates}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coordinates != null) localVarPathParams.Add("coordinates", this.Configuration.ApiClient.ParameterToString(coordinates)); // path parameter
            if (bearings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bearings", bearings)); // query parameter
            if (radiuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "radiuses", radiuses)); // query parameter
            if (generateHints != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generate_hints", generateHints)); // query parameter
            if (approaches != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approaches", approaches)); // query parameter
            if (exclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude", exclude)); // query parameter
            if (annotations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "annotations", annotations)); // query parameter
            if (sources != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sources", sources)); // query parameter
            if (destinations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinations", destinations)); // query parameter
            if (fallbackSpeed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fallback_speed", fallbackSpeed)); // query parameter
            if (fallbackCoordinate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fallback_coordinate", fallbackCoordinate)); // query parameter

            // authentication (key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Matrix", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DirectionsMatrix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DirectionsMatrix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DirectionsMatrix)));
        }

        /// <summary>
        /// Matrix Service Computes duration of the fastest route between all pairs of supplied coordinates. Returns the durations or distances or both between the coordinate pairs. Note that the distances are not the shortest distance between two coordinates, but rather the distances of the fastest routes.
        /// </summary>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional)</param>
        /// <param name="sources">Use location with given index as source. [ {index};{index}[;{index} ...] or all (default) ] &#x3D;&gt; index  0 &lt;&#x3D; integer &lt; #locations (optional)</param>
        /// <param name="destinations">Use location with given index as destination. [ {index};{index}[;{index} ...] or all (default) ] (optional)</param>
        /// <param name="fallbackSpeed">If no route found between a source/destination pair, calculate the as-the-crow-flies distance,  then use this speed to estimate duration. double &gt; 0 (optional)</param>
        /// <param name="fallbackCoordinate">When using a fallback_speed, use the user-supplied coordinate (input), or the snapped location (snapped) for calculating distances. [ input (default), or snapped ] (optional, default to &quot;&quot;input&quot;&quot;)</param>
        /// <returns>Task of DirectionsMatrix</returns>
        public async System.Threading.Tasks.Task<DirectionsMatrix> MatrixAsync (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), string annotations = default(string), int sources = default(int), int destinations = default(int), decimal fallbackSpeed = default(decimal), string fallbackCoordinate = default(string))
        {
             ApiResponse<DirectionsMatrix> localVarResponse = await MatrixAsyncWithHttpInfo(coordinates, bearings, radiuses, generateHints, approaches, exclude, annotations, sources, destinations, fallbackSpeed, fallbackCoordinate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Matrix Service Computes duration of the fastest route between all pairs of supplied coordinates. Returns the durations or distances or both between the coordinate pairs. Note that the distances are not the shortest distance between two coordinates, but rather the distances of the fastest routes.
        /// </summary>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional)</param>
        /// <param name="sources">Use location with given index as source. [ {index};{index}[;{index} ...] or all (default) ] &#x3D;&gt; index  0 &lt;&#x3D; integer &lt; #locations (optional)</param>
        /// <param name="destinations">Use location with given index as destination. [ {index};{index}[;{index} ...] or all (default) ] (optional)</param>
        /// <param name="fallbackSpeed">If no route found between a source/destination pair, calculate the as-the-crow-flies distance,  then use this speed to estimate duration. double &gt; 0 (optional)</param>
        /// <param name="fallbackCoordinate">When using a fallback_speed, use the user-supplied coordinate (input), or the snapped location (snapped) for calculating distances. [ input (default), or snapped ] (optional, default to &quot;&quot;input&quot;&quot;)</param>
        /// <returns>Task of ApiResponse (DirectionsMatrix)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DirectionsMatrix>> MatrixAsyncWithHttpInfo (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), string annotations = default(string), int sources = default(int), int destinations = default(int), decimal fallbackSpeed = default(decimal), string fallbackCoordinate = default(string))
        {
            // verify the required parameter 'coordinates' is set
            if (coordinates == null)
                throw new ApiException(400, "Missing required parameter 'coordinates' when calling MatrixApi->Matrix");

            var localVarPath = "/matrix/driving/{coordinates}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coordinates != null) localVarPathParams.Add("coordinates", this.Configuration.ApiClient.ParameterToString(coordinates)); // path parameter
            if (bearings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bearings", bearings)); // query parameter
            if (radiuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "radiuses", radiuses)); // query parameter
            if (generateHints != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generate_hints", generateHints)); // query parameter
            if (approaches != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approaches", approaches)); // query parameter
            if (exclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude", exclude)); // query parameter
            if (annotations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "annotations", annotations)); // query parameter
            if (sources != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sources", sources)); // query parameter
            if (destinations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "destinations", destinations)); // query parameter
            if (fallbackSpeed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fallback_speed", fallbackSpeed)); // query parameter
            if (fallbackCoordinate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fallback_coordinate", fallbackCoordinate)); // query parameter

            // authentication (key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Matrix", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DirectionsMatrix>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DirectionsMatrix) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DirectionsMatrix)));
        }

    }
}
