/* 
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using locationiq.Client;
using locationiq.Model;

namespace locationiq.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDirectionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Directions Service
        /// </summary>
        /// <remarks>
        /// Finds the fastest route between coordinates in the supplied order.
        /// </remarks>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="alternatives">Search for alternative routes. Passing a number alternatives&#x3D;n searches for up to n alternative routes. [ true, false (default), or Number ] (optional)</param>
        /// <param name="steps">Returned route steps for each route leg [ true, false (default) ] (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;&quot;false&quot;&quot;)</param>
        /// <param name="geometries">Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;&quot;polyline&quot;&quot;)</param>
        /// <param name="overview">Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;&quot;simplified&quot;&quot;)</param>
        /// <param name="continueStraight">Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile [ default (default), true, false ] (optional, default to &quot;&quot;default&quot;&quot;)</param>
        /// <returns>DirectionsDirections</returns>
        DirectionsDirections Directions (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), decimal alternatives = default(decimal), string steps = default(string), string annotations = default(string), string geometries = default(string), string overview = default(string), string continueStraight = default(string));

        /// <summary>
        /// Directions Service
        /// </summary>
        /// <remarks>
        /// Finds the fastest route between coordinates in the supplied order.
        /// </remarks>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="alternatives">Search for alternative routes. Passing a number alternatives&#x3D;n searches for up to n alternative routes. [ true, false (default), or Number ] (optional)</param>
        /// <param name="steps">Returned route steps for each route leg [ true, false (default) ] (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;&quot;false&quot;&quot;)</param>
        /// <param name="geometries">Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;&quot;polyline&quot;&quot;)</param>
        /// <param name="overview">Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;&quot;simplified&quot;&quot;)</param>
        /// <param name="continueStraight">Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile [ default (default), true, false ] (optional, default to &quot;&quot;default&quot;&quot;)</param>
        /// <returns>ApiResponse of DirectionsDirections</returns>
        ApiResponse<DirectionsDirections> DirectionsWithHttpInfo (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), decimal alternatives = default(decimal), string steps = default(string), string annotations = default(string), string geometries = default(string), string overview = default(string), string continueStraight = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Directions Service
        /// </summary>
        /// <remarks>
        /// Finds the fastest route between coordinates in the supplied order.
        /// </remarks>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="alternatives">Search for alternative routes. Passing a number alternatives&#x3D;n searches for up to n alternative routes. [ true, false (default), or Number ] (optional)</param>
        /// <param name="steps">Returned route steps for each route leg [ true, false (default) ] (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;&quot;false&quot;&quot;)</param>
        /// <param name="geometries">Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;&quot;polyline&quot;&quot;)</param>
        /// <param name="overview">Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;&quot;simplified&quot;&quot;)</param>
        /// <param name="continueStraight">Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile [ default (default), true, false ] (optional, default to &quot;&quot;default&quot;&quot;)</param>
        /// <returns>Task of DirectionsDirections</returns>
        System.Threading.Tasks.Task<DirectionsDirections> DirectionsAsync (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), decimal alternatives = default(decimal), string steps = default(string), string annotations = default(string), string geometries = default(string), string overview = default(string), string continueStraight = default(string));

        /// <summary>
        /// Directions Service
        /// </summary>
        /// <remarks>
        /// Finds the fastest route between coordinates in the supplied order.
        /// </remarks>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="alternatives">Search for alternative routes. Passing a number alternatives&#x3D;n searches for up to n alternative routes. [ true, false (default), or Number ] (optional)</param>
        /// <param name="steps">Returned route steps for each route leg [ true, false (default) ] (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;&quot;false&quot;&quot;)</param>
        /// <param name="geometries">Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;&quot;polyline&quot;&quot;)</param>
        /// <param name="overview">Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;&quot;simplified&quot;&quot;)</param>
        /// <param name="continueStraight">Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile [ default (default), true, false ] (optional, default to &quot;&quot;default&quot;&quot;)</param>
        /// <returns>Task of ApiResponse (DirectionsDirections)</returns>
        System.Threading.Tasks.Task<ApiResponse<DirectionsDirections>> DirectionsAsyncWithHttpInfo (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), decimal alternatives = default(decimal), string steps = default(string), string annotations = default(string), string geometries = default(string), string overview = default(string), string continueStraight = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DirectionsApi : IDirectionsApi
    {
        private locationiq.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DirectionsApi(String basePath)
        {
            this.Configuration = new locationiq.Client.Configuration { BasePath = basePath };

            ExceptionFactory = locationiq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DirectionsApi()
        {
            this.Configuration = locationiq.Client.Configuration.Default;

            ExceptionFactory = locationiq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DirectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DirectionsApi(locationiq.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = locationiq.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = locationiq.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public locationiq.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public locationiq.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Directions Service Finds the fastest route between coordinates in the supplied order.
        /// </summary>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="alternatives">Search for alternative routes. Passing a number alternatives&#x3D;n searches for up to n alternative routes. [ true, false (default), or Number ] (optional)</param>
        /// <param name="steps">Returned route steps for each route leg [ true, false (default) ] (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;&quot;false&quot;&quot;)</param>
        /// <param name="geometries">Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;&quot;polyline&quot;&quot;)</param>
        /// <param name="overview">Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;&quot;simplified&quot;&quot;)</param>
        /// <param name="continueStraight">Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile [ default (default), true, false ] (optional, default to &quot;&quot;default&quot;&quot;)</param>
        /// <returns>DirectionsDirections</returns>
        public DirectionsDirections Directions (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), decimal alternatives = default(decimal), string steps = default(string), string annotations = default(string), string geometries = default(string), string overview = default(string), string continueStraight = default(string))
        {
             ApiResponse<DirectionsDirections> localVarResponse = DirectionsWithHttpInfo(coordinates, bearings, radiuses, generateHints, approaches, exclude, alternatives, steps, annotations, geometries, overview, continueStraight);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Directions Service Finds the fastest route between coordinates in the supplied order.
        /// </summary>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="alternatives">Search for alternative routes. Passing a number alternatives&#x3D;n searches for up to n alternative routes. [ true, false (default), or Number ] (optional)</param>
        /// <param name="steps">Returned route steps for each route leg [ true, false (default) ] (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;&quot;false&quot;&quot;)</param>
        /// <param name="geometries">Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;&quot;polyline&quot;&quot;)</param>
        /// <param name="overview">Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;&quot;simplified&quot;&quot;)</param>
        /// <param name="continueStraight">Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile [ default (default), true, false ] (optional, default to &quot;&quot;default&quot;&quot;)</param>
        /// <returns>ApiResponse of DirectionsDirections</returns>
        public ApiResponse<DirectionsDirections> DirectionsWithHttpInfo (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), decimal alternatives = default(decimal), string steps = default(string), string annotations = default(string), string geometries = default(string), string overview = default(string), string continueStraight = default(string))
        {
            // verify the required parameter 'coordinates' is set
            if (coordinates == null)
                throw new ApiException(400, "Missing required parameter 'coordinates' when calling DirectionsApi->Directions");

            var localVarPath = "/directions/driving/{coordinates}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coordinates != null) localVarPathParams.Add("coordinates", this.Configuration.ApiClient.ParameterToString(coordinates)); // path parameter
            if (bearings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bearings", bearings)); // query parameter
            if (radiuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "radiuses", radiuses)); // query parameter
            if (generateHints != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generate_hints", generateHints)); // query parameter
            if (approaches != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approaches", approaches)); // query parameter
            if (exclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude", exclude)); // query parameter
            if (alternatives != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alternatives", alternatives)); // query parameter
            if (steps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "steps", steps)); // query parameter
            if (annotations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "annotations", annotations)); // query parameter
            if (geometries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "geometries", geometries)); // query parameter
            if (overview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overview", overview)); // query parameter
            if (continueStraight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "continue_straight", continueStraight)); // query parameter

            // authentication (key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Directions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DirectionsDirections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DirectionsDirections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DirectionsDirections)));
        }

        /// <summary>
        /// Directions Service Finds the fastest route between coordinates in the supplied order.
        /// </summary>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="alternatives">Search for alternative routes. Passing a number alternatives&#x3D;n searches for up to n alternative routes. [ true, false (default), or Number ] (optional)</param>
        /// <param name="steps">Returned route steps for each route leg [ true, false (default) ] (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;&quot;false&quot;&quot;)</param>
        /// <param name="geometries">Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;&quot;polyline&quot;&quot;)</param>
        /// <param name="overview">Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;&quot;simplified&quot;&quot;)</param>
        /// <param name="continueStraight">Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile [ default (default), true, false ] (optional, default to &quot;&quot;default&quot;&quot;)</param>
        /// <returns>Task of DirectionsDirections</returns>
        public async System.Threading.Tasks.Task<DirectionsDirections> DirectionsAsync (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), decimal alternatives = default(decimal), string steps = default(string), string annotations = default(string), string geometries = default(string), string overview = default(string), string continueStraight = default(string))
        {
             ApiResponse<DirectionsDirections> localVarResponse = await DirectionsAsyncWithHttpInfo(coordinates, bearings, radiuses, generateHints, approaches, exclude, alternatives, steps, annotations, geometries, overview, continueStraight);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Directions Service Finds the fastest route between coordinates in the supplied order.
        /// </summary>
        /// <exception cref="locationiq.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coordinates">String of format {longitude},{latitude};{longitude},{latitude}[;{longitude},{latitude} ...] or polyline({polyline}) or polyline6({polyline6}). polyline follows Google&#39;s polyline format with precision 5</param>
        /// <param name="bearings">Limits the search to segments with given bearing in degrees towards true north in clockwise direction. List of positive integer pairs separated by semi-colon and bearings array should be equal to length of coordinate array. Input Value :- {bearing};{bearing}[;{bearing} ...] Bearing follows the following format : bearing {value},{range} integer 0 .. 360,integer 0 .. 180 (optional)</param>
        /// <param name="radiuses">Limits the search to given radius in meters Radiuses array length should be same as coordinates array, eaach value separated by semi-colon. Input Value - {radius};{radius}[;{radius} ...] Radius has following format :- double &gt;&#x3D; 0 or unlimited (default) (optional)</param>
        /// <param name="generateHints">Adds a Hint to the response which can be used in subsequent requests, see hints parameter. Input Value - true (default), false Format - Base64 String (optional)</param>
        /// <param name="approaches">Keep waypoints on curb side. Input Value - {approach};{approach}[;{approach} ...] Format - curb or unrestricted (default) (optional)</param>
        /// <param name="exclude">Additive list of classes to avoid, order does not matter. input Value - {class}[,{class}] Format - A class name determined by the profile or none. (optional)</param>
        /// <param name="alternatives">Search for alternative routes. Passing a number alternatives&#x3D;n searches for up to n alternative routes. [ true, false (default), or Number ] (optional)</param>
        /// <param name="steps">Returned route steps for each route leg [ true, false (default) ] (optional)</param>
        /// <param name="annotations">Returns additional metadata for each coordinate along the route geometry.  [ true, false (default), nodes, distance, duration, datasources, weight, speed ] (optional, default to &quot;&quot;false&quot;&quot;)</param>
        /// <param name="geometries">Returned route geometry format (influences overview and per step) [ polyline (default), polyline6, geojson ] (optional, default to &quot;&quot;polyline&quot;&quot;)</param>
        /// <param name="overview">Add overview geometry either full, simplified according to highest zoom level it could be display on, or not at all. [ simplified (default), full, false ] (optional, default to &quot;&quot;simplified&quot;&quot;)</param>
        /// <param name="continueStraight">Forces the route to keep going straight at waypoints constraining uturns there even if it would be faster. Default value depends on the profile [ default (default), true, false ] (optional, default to &quot;&quot;default&quot;&quot;)</param>
        /// <returns>Task of ApiResponse (DirectionsDirections)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DirectionsDirections>> DirectionsAsyncWithHttpInfo (string coordinates, string bearings = default(string), string radiuses = default(string), string generateHints = default(string), string approaches = default(string), string exclude = default(string), decimal alternatives = default(decimal), string steps = default(string), string annotations = default(string), string geometries = default(string), string overview = default(string), string continueStraight = default(string))
        {
            // verify the required parameter 'coordinates' is set
            if (coordinates == null)
                throw new ApiException(400, "Missing required parameter 'coordinates' when calling DirectionsApi->Directions");

            var localVarPath = "/directions/driving/{coordinates}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coordinates != null) localVarPathParams.Add("coordinates", this.Configuration.ApiClient.ParameterToString(coordinates)); // path parameter
            if (bearings != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "bearings", bearings)); // query parameter
            if (radiuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "radiuses", radiuses)); // query parameter
            if (generateHints != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "generate_hints", generateHints)); // query parameter
            if (approaches != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "approaches", approaches)); // query parameter
            if (exclude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "exclude", exclude)); // query parameter
            if (alternatives != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "alternatives", alternatives)); // query parameter
            if (steps != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "steps", steps)); // query parameter
            if (annotations != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "annotations", annotations)); // query parameter
            if (geometries != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "geometries", geometries)); // query parameter
            if (overview != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overview", overview)); // query parameter
            if (continueStraight != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "continue_straight", continueStraight)); // query parameter

            // authentication (key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("key")))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "key", this.Configuration.GetApiKeyWithPrefix("key")));
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Directions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DirectionsDirections>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DirectionsDirections) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DirectionsDirections)));
        }

    }
}
