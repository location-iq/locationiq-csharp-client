/* 
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DirectionsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DirectionsApiTests
    {
        private DirectionsApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DirectionsApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DirectionsApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DirectionsApi
            //Assert.IsInstanceOf(typeof(DirectionsApi), instance);
        }

        
        /// <summary>
        /// Test Directions
        /// </summary>
        [Test]
        public void DirectionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string coordinates = null;
            //string bearings = null;
            //string radiuses = null;
            //string generateHints = null;
            //string approaches = null;
            //string exclude = null;
            //decimal alternatives = null;
            //string steps = null;
            //string annotations = null;
            //string geometries = null;
            //string overview = null;
            //string continueStraight = null;
            //var response = instance.Directions(coordinates, bearings, radiuses, generateHints, approaches, exclude, alternatives, steps, annotations, geometries, overview, continueStraight);
            //Assert.IsInstanceOf(typeof(DirectionsDirections), response, "response is DirectionsDirections");
        }
        
    }

}
