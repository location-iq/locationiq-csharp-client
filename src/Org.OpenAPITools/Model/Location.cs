/* 
 * LocationIQ
 *
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Location
    /// </summary>
    [DataContract]
    public partial class Location :  IEquatable<Location>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="distance">distance.</param>
        /// <param name="placeId">placeId.</param>
        /// <param name="licence">licence.</param>
        /// <param name="osmType">osmType.</param>
        /// <param name="osmId">osmId.</param>
        /// <param name="boundingbox">boundingbox.</param>
        /// <param name="lat">lat.</param>
        /// <param name="lon">lon.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="_class">_class.</param>
        /// <param name="type">type.</param>
        /// <param name="importance">importance.</param>
        /// <param name="address">address.</param>
        /// <param name="namedetails">namedetails.</param>
        /// <param name="matchquality">matchquality.</param>
        public Location(decimal distance = default(decimal), string placeId = default(string), string licence = default(string), string osmType = default(string), string osmId = default(string), List<string> boundingbox = default(List<string>), string lat = default(string), string lon = default(string), string displayName = default(string), string _class = default(string), string type = default(string), decimal importance = default(decimal), Address address = default(Address), Namedetails namedetails = default(Namedetails), Matchquality matchquality = default(Matchquality))
        {
            this.Distance = distance;
            this.PlaceId = placeId;
            this.Licence = licence;
            this.OsmType = osmType;
            this.OsmId = osmId;
            this.Boundingbox = boundingbox;
            this.Lat = lat;
            this.Lon = lon;
            this.DisplayName = displayName;
            this.Class = _class;
            this.Type = type;
            this.Importance = importance;
            this.Address = address;
            this.Namedetails = namedetails;
            this.Matchquality = matchquality;
        }
        
        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public decimal Distance { get; set; }

        /// <summary>
        /// Gets or Sets PlaceId
        /// </summary>
        [DataMember(Name="place_id", EmitDefaultValue=false)]
        public string PlaceId { get; set; }

        /// <summary>
        /// Gets or Sets Licence
        /// </summary>
        [DataMember(Name="licence", EmitDefaultValue=false)]
        public string Licence { get; set; }

        /// <summary>
        /// Gets or Sets OsmType
        /// </summary>
        [DataMember(Name="osm_type", EmitDefaultValue=false)]
        public string OsmType { get; set; }

        /// <summary>
        /// Gets or Sets OsmId
        /// </summary>
        [DataMember(Name="osm_id", EmitDefaultValue=false)]
        public string OsmId { get; set; }

        /// <summary>
        /// Gets or Sets Boundingbox
        /// </summary>
        [DataMember(Name="boundingbox", EmitDefaultValue=false)]
        public List<string> Boundingbox { get; set; }

        /// <summary>
        /// Gets or Sets Lat
        /// </summary>
        [DataMember(Name="lat", EmitDefaultValue=false)]
        public string Lat { get; set; }

        /// <summary>
        /// Gets or Sets Lon
        /// </summary>
        [DataMember(Name="lon", EmitDefaultValue=false)]
        public string Lon { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [DataMember(Name="class", EmitDefaultValue=false)]
        public string Class { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Importance
        /// </summary>
        [DataMember(Name="importance", EmitDefaultValue=false)]
        public decimal Importance { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public Address Address { get; set; }

        /// <summary>
        /// Gets or Sets Namedetails
        /// </summary>
        [DataMember(Name="namedetails", EmitDefaultValue=false)]
        public Namedetails Namedetails { get; set; }

        /// <summary>
        /// Gets or Sets Matchquality
        /// </summary>
        [DataMember(Name="matchquality", EmitDefaultValue=false)]
        public Matchquality Matchquality { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  PlaceId: ").Append(PlaceId).Append("\n");
            sb.Append("  Licence: ").Append(Licence).Append("\n");
            sb.Append("  OsmType: ").Append(OsmType).Append("\n");
            sb.Append("  OsmId: ").Append(OsmId).Append("\n");
            sb.Append("  Boundingbox: ").Append(Boundingbox).Append("\n");
            sb.Append("  Lat: ").Append(Lat).Append("\n");
            sb.Append("  Lon: ").Append(Lon).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Importance: ").Append(Importance).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Namedetails: ").Append(Namedetails).Append("\n");
            sb.Append("  Matchquality: ").Append(Matchquality).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="input">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.PlaceId == input.PlaceId ||
                    (this.PlaceId != null &&
                    this.PlaceId.Equals(input.PlaceId))
                ) && 
                (
                    this.Licence == input.Licence ||
                    (this.Licence != null &&
                    this.Licence.Equals(input.Licence))
                ) && 
                (
                    this.OsmType == input.OsmType ||
                    (this.OsmType != null &&
                    this.OsmType.Equals(input.OsmType))
                ) && 
                (
                    this.OsmId == input.OsmId ||
                    (this.OsmId != null &&
                    this.OsmId.Equals(input.OsmId))
                ) && 
                (
                    this.Boundingbox == input.Boundingbox ||
                    this.Boundingbox != null &&
                    input.Boundingbox != null &&
                    this.Boundingbox.SequenceEqual(input.Boundingbox)
                ) && 
                (
                    this.Lat == input.Lat ||
                    (this.Lat != null &&
                    this.Lat.Equals(input.Lat))
                ) && 
                (
                    this.Lon == input.Lon ||
                    (this.Lon != null &&
                    this.Lon.Equals(input.Lon))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Class == input.Class ||
                    (this.Class != null &&
                    this.Class.Equals(input.Class))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Importance == input.Importance ||
                    (this.Importance != null &&
                    this.Importance.Equals(input.Importance))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Namedetails == input.Namedetails ||
                    (this.Namedetails != null &&
                    this.Namedetails.Equals(input.Namedetails))
                ) && 
                (
                    this.Matchquality == input.Matchquality ||
                    (this.Matchquality != null &&
                    this.Matchquality.Equals(input.Matchquality))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.PlaceId != null)
                    hashCode = hashCode * 59 + this.PlaceId.GetHashCode();
                if (this.Licence != null)
                    hashCode = hashCode * 59 + this.Licence.GetHashCode();
                if (this.OsmType != null)
                    hashCode = hashCode * 59 + this.OsmType.GetHashCode();
                if (this.OsmId != null)
                    hashCode = hashCode * 59 + this.OsmId.GetHashCode();
                if (this.Boundingbox != null)
                    hashCode = hashCode * 59 + this.Boundingbox.GetHashCode();
                if (this.Lat != null)
                    hashCode = hashCode * 59 + this.Lat.GetHashCode();
                if (this.Lon != null)
                    hashCode = hashCode * 59 + this.Lon.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Class != null)
                    hashCode = hashCode * 59 + this.Class.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Importance != null)
                    hashCode = hashCode * 59 + this.Importance.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Namedetails != null)
                    hashCode = hashCode * 59 + this.Namedetails.GetHashCode();
                if (this.Matchquality != null)
                    hashCode = hashCode * 59 + this.Matchquality.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
